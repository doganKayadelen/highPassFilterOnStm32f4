
2507highPassFilterKosturmaca.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002904  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000ec  200000ec  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001138d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002012  00000000  00000000  000313c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b38  00000000  00000000  000333e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a50  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005181  00000000  00000000  00034968  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a02  00000000  00000000  00039ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003d4eb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e54  00000000  00000000  0003d568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a74 	.word	0x08002a74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a74 	.word	0x08002a74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fdad 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f002 f87a 	bl	8002604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fdc5 	bl	80010ca <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 fd8d 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e033      	b.n	800063a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d109      	bne.n	80005ee <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f002 f85d 	bl	80026a8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	f003 0310 	and.w	r3, r3, #16
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d118      	bne.n	800062c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	f043 0202 	orr.w	r2, r3, #2
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 fb58 	bl	8000cc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f023 0303 	bic.w	r3, r3, #3
 8000622:	f043 0201 	orr.w	r2, r3, #1
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	641a      	str	r2, [r3, #64]	; 0x40
 800062a:	e001      	b.n	8000630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000656:	2b01      	cmp	r3, #1
 8000658:	d101      	bne.n	800065e <HAL_ADC_Start_IT+0x1a>
 800065a:	2302      	movs	r3, #2
 800065c:	e093      	b.n	8000786 <HAL_ADC_Start_IT+0x142>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b01      	cmp	r3, #1
 8000672:	d018      	beq.n	80006a6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	6892      	ldr	r2, [r2, #8]
 800067e:	f042 0201 	orr.w	r2, r2, #1
 8000682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <HAL_ADC_Start_IT+0x150>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a43      	ldr	r2, [pc, #268]	; (8000798 <HAL_ADC_Start_IT+0x154>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	0c9a      	lsrs	r2, r3, #18
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000698:	e002      	b.n	80006a0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	3b01      	subs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f9      	bne.n	800069a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d067      	beq.n	8000784 <HAL_ADC_Start_IT+0x140>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d006      	beq.n	8000700 <HAL_ADC_Start_IT+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	f023 0206 	bic.w	r2, r3, #6
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	645a      	str	r2, [r3, #68]	; 0x44
 80006fe:	e002      	b.n	8000706 <HAL_ADC_Start_IT+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <HAL_ADC_Start_IT+0x158>)
 8000710:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800071a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 031f 	and.w	r3, r3, #31
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10f      	bne.n	800075c <HAL_ADC_Start_IT+0x118>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d11c      	bne.n	8000784 <HAL_ADC_Start_IT+0x140>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	6892      	ldr	r2, [r2, #8]
 8000754:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	e013      	b.n	8000784 <HAL_ADC_Start_IT+0x140>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_ADC_Start_IT+0x15c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d10e      	bne.n	8000784 <HAL_ADC_Start_IT+0x140>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d107      	bne.n	8000784 <HAL_ADC_Start_IT+0x140>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	6892      	ldr	r2, [r2, #8]
 800077e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000782:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008
 8000798:	431bde83 	.word	0x431bde83
 800079c:	40012300 	.word	0x40012300
 80007a0:	40012000 	.word	0x40012000

080007a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	2b02      	cmp	r3, #2
 80007c0:	bf0c      	ite	eq
 80007c2:	2301      	moveq	r3, #1
 80007c4:	2300      	movne	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	2b20      	cmp	r3, #32
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d049      	beq.n	800087a <HAL_ADC_IRQHandler+0xd6>
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d046      	beq.n	800087a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d105      	bne.n	8000804 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d12b      	bne.n	800086a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000816:	2b00      	cmp	r3, #0
 8000818:	d127      	bne.n	800086a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000832:	2b00      	cmp	r3, #0
 8000834:	d119      	bne.n	800086a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	f022 0220 	bic.w	r2, r2, #32
 8000844:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f043 0201 	orr.w	r2, r3, #1
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f8e8 	bl	8000a40 <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f06f 0212 	mvn.w	r2, #18
 8000878:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	2b04      	cmp	r3, #4
 8000886:	bf0c      	ite	eq
 8000888:	2301      	moveq	r3, #1
 800088a:	2300      	movne	r3, #0
 800088c:	b2db      	uxtb	r3, r3
 800088e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	2b80      	cmp	r3, #128	; 0x80
 800089c:	bf0c      	ite	eq
 800089e:	2301      	moveq	r3, #1
 80008a0:	2300      	movne	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d057      	beq.n	800095c <HAL_ADC_IRQHandler+0x1b8>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d054      	beq.n	800095c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d105      	bne.n	80008ca <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d139      	bne.n	800094c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d006      	beq.n	80008f4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d12b      	bne.n	800094c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d124      	bne.n	800094c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800090c:	2b00      	cmp	r3, #0
 800090e:	d11d      	bne.n	800094c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000914:	2b00      	cmp	r3, #0
 8000916:	d119      	bne.n	800094c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	6852      	ldr	r2, [r2, #4]
 8000922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000926:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800093c:	2b00      	cmp	r3, #0
 800093e:	d105      	bne.n	800094c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f043 0201 	orr.w	r2, r3, #1
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 fab3 	bl	8000eb8 <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f06f 020c 	mvn.w	r2, #12
 800095a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	2b01      	cmp	r3, #1
 8000968:	bf0c      	ite	eq
 800096a:	2301      	moveq	r3, #1
 800096c:	2300      	movne	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097c:	2b40      	cmp	r3, #64	; 0x40
 800097e:	bf0c      	ite	eq
 8000980:	2301      	moveq	r3, #1
 8000982:	2300      	movne	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d017      	beq.n	80009be <HAL_ADC_IRQHandler+0x21a>
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d014      	beq.n	80009be <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d10d      	bne.n	80009be <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f850 	bl	8000a54 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f06f 0201 	mvn.w	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b20      	cmp	r3, #32
 80009ca:	bf0c      	ite	eq
 80009cc:	2301      	moveq	r3, #1
 80009ce:	2300      	movne	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80009e2:	bf0c      	ite	eq
 80009e4:	2301      	moveq	r3, #1
 80009e6:	2300      	movne	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d015      	beq.n	8000a1e <HAL_ADC_IRQHandler+0x27a>
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d012      	beq.n	8000a1e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fc:	f043 0202 	orr.w	r2, r3, #2
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f06f 0220 	mvn.w	r2, #32
 8000a0c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f82a 	bl	8000a68 <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f06f 0220 	mvn.w	r2, #32
 8000a1c:	601a      	str	r2, [r3, #0]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a7c:	b490      	push	{r4, r7}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d101      	bne.n	8000a98 <HAL_ADC_ConfigChannel+0x1c>
 8000a94:	2302      	movs	r3, #2
 8000a96:	e107      	b.n	8000ca8 <HAL_ADC_ConfigChannel+0x22c>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b09      	cmp	r3, #9
 8000aa6:	d926      	bls.n	8000af6 <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68d9      	ldr	r1, [r3, #12]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	4603      	mov	r3, r0
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4403      	add	r3, r0
 8000ac0:	3b1e      	subs	r3, #30
 8000ac2:	2007      	movs	r0, #7
 8000ac4:	fa00 f303 	lsl.w	r3, r0, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	400b      	ands	r3, r1
 8000acc:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68d9      	ldr	r1, [r3, #12]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	6898      	ldr	r0, [r3, #8]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	461c      	mov	r4, r3
 8000ae4:	4623      	mov	r3, r4
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4423      	add	r3, r4
 8000aea:	3b1e      	subs	r3, #30
 8000aec:	fa00 f303 	lsl.w	r3, r0, r3
 8000af0:	430b      	orrs	r3, r1
 8000af2:	60d3      	str	r3, [r2, #12]
 8000af4:	e023      	b.n	8000b3e <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6919      	ldr	r1, [r3, #16]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	4603      	mov	r3, r0
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4403      	add	r3, r0
 8000b0e:	2007      	movs	r0, #7
 8000b10:	fa00 f303 	lsl.w	r3, r0, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	400b      	ands	r3, r1
 8000b18:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6919      	ldr	r1, [r3, #16]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6898      	ldr	r0, [r3, #8]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	461c      	mov	r4, r3
 8000b30:	4623      	mov	r3, r4
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4423      	add	r3, r4
 8000b36:	fa00 f303 	lsl.w	r3, r0, r3
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d824      	bhi.n	8000b90 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	3b05      	subs	r3, #5
 8000b5c:	221f      	movs	r2, #31
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	4003      	ands	r3, r0
 8000b66:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	461c      	mov	r4, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3b05      	subs	r3, #5
 8000b86:	fa04 f303 	lsl.w	r3, r4, r3
 8000b8a:	4303      	orrs	r3, r0
 8000b8c:	634b      	str	r3, [r1, #52]	; 0x34
 8000b8e:	e04c      	b.n	8000c2a <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b0c      	cmp	r3, #12
 8000b96:	d824      	bhi.n	8000be2 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	3b23      	subs	r3, #35	; 0x23
 8000bae:	221f      	movs	r2, #31
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	461c      	mov	r4, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3b23      	subs	r3, #35	; 0x23
 8000bd8:	fa04 f303 	lsl.w	r3, r4, r3
 8000bdc:	4303      	orrs	r3, r0
 8000bde:	630b      	str	r3, [r1, #48]	; 0x30
 8000be0:	e023      	b.n	8000c2a <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6819      	ldr	r1, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3b41      	subs	r3, #65	; 0x41
 8000bf8:	221f      	movs	r2, #31
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	4003      	ands	r3, r0
 8000c02:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	461c      	mov	r4, r3
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	3b41      	subs	r3, #65	; 0x41
 8000c22:	fa04 f303 	lsl.w	r3, r4, r3
 8000c26:	4303      	orrs	r3, r0
 8000c28:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <HAL_ADC_ConfigChannel+0x238>)
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <HAL_ADC_ConfigChannel+0x23c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d109      	bne.n	8000c4c <HAL_ADC_ConfigChannel+0x1d0>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b12      	cmp	r3, #18
 8000c3e:	d105      	bne.n	8000c4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_ADC_ConfigChannel+0x23c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d123      	bne.n	8000c9e <HAL_ADC_ConfigChannel+0x222>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b10      	cmp	r3, #16
 8000c5c:	d003      	beq.n	8000c66 <HAL_ADC_ConfigChannel+0x1ea>
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b11      	cmp	r3, #17
 8000c64:	d11b      	bne.n	8000c9e <HAL_ADC_ConfigChannel+0x222>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	d111      	bne.n	8000c9e <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_ADC_ConfigChannel+0x240>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_ADC_ConfigChannel+0x244>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	0c9a      	lsrs	r2, r3, #18
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000c90:	e002      	b.n	8000c98 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f9      	bne.n	8000c92 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc90      	pop	{r4, r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40012300 	.word	0x40012300
 8000cb8:	40012000 	.word	0x40012000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	431bde83 	.word	0x431bde83

08000cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ccc:	4b78      	ldr	r3, [pc, #480]	; (8000eb0 <ADC_Init+0x1ec>)
 8000cce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	6852      	ldr	r2, [r2, #4]
 8000cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	6851      	ldr	r1, [r2, #4]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	6912      	ldr	r2, [r2, #16]
 8000d08:	0212      	lsls	r2, r2, #8
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	6852      	ldr	r2, [r2, #4]
 8000d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	6851      	ldr	r1, [r2, #4]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6892      	ldr	r2, [r2, #8]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	6892      	ldr	r2, [r2, #8]
 8000d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	6891      	ldr	r1, [r2, #8]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68d2      	ldr	r2, [r2, #12]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d56:	4a57      	ldr	r2, [pc, #348]	; (8000eb4 <ADC_Init+0x1f0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d022      	beq.n	8000da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	6892      	ldr	r2, [r2, #8]
 8000d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	6891      	ldr	r1, [r2, #8]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	6892      	ldr	r2, [r2, #8]
 8000d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	6891      	ldr	r1, [r2, #8]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	e00f      	b.n	8000dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	6892      	ldr	r2, [r2, #8]
 8000dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	6892      	ldr	r2, [r2, #8]
 8000dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	6892      	ldr	r2, [r2, #8]
 8000dcc:	f022 0202 	bic.w	r2, r2, #2
 8000dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	6891      	ldr	r1, [r2, #8]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6992      	ldr	r2, [r2, #24]
 8000de0:	0052      	lsls	r2, r2, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d01b      	beq.n	8000e26 <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	6852      	ldr	r2, [r2, #4]
 8000df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dfc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	6852      	ldr	r2, [r2, #4]
 8000e08:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e0c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	6851      	ldr	r1, [r2, #4]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e1c:	3a01      	subs	r2, #1
 8000e1e:	0352      	lsls	r2, r2, #13
 8000e20:	430a      	orrs	r2, r1
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	e007      	b.n	8000e36 <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6852      	ldr	r2, [r2, #4]
 8000e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e34:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	69d2      	ldr	r2, [r2, #28]
 8000e54:	3a01      	subs	r2, #1
 8000e56:	0512      	lsls	r2, r2, #20
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	6892      	ldr	r2, [r2, #8]
 8000e66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	6891      	ldr	r1, [r2, #8]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e7a:	0252      	lsls	r2, r2, #9
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	6892      	ldr	r2, [r2, #8]
 8000e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6891      	ldr	r1, [r2, #8]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6952      	ldr	r2, [r2, #20]
 8000e9e:	0292      	lsls	r2, r2, #10
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	609a      	str	r2, [r3, #8]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40012300 	.word	0x40012300
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f3a:	4909      	ldr	r1, [pc, #36]	; (8000f60 <NVIC_EnableIRQ+0x30>)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	095b      	lsrs	r3, r3, #5
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	f002 021f 	and.w	r2, r2, #31
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da0b      	bge.n	8000f90 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <NVIC_SetPriority+0x4c>)
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	3b04      	subs	r3, #4
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8e:	e009      	b.n	8000fa4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <NVIC_SetPriority+0x50>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	2201      	movs	r2, #1
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffe:	2101      	movs	r1, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	1e59      	subs	r1, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff90 	bl	8000f64 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff2f 	bl	8000ecc <NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff44 	bl	8000f14 <NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff90 	bl	8000fb8 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5f 	bl	8000f64 <NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff37 	bl	8000f30 <NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d106      	bne.n	8001100 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80010fe:	e005      	b.n	800110c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 0304 	bic.w	r3, r3, #4
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001120:	f000 f802 	bl	8001128 <HAL_SYSTICK_Callback>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e014      	b.n	8001172 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 fadb 	bl	8002714 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2202      	movs	r2, #2
 8001162:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800117a:	b480      	push	{r7}
 800117c:	b087      	sub	sp, #28
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	795b      	ldrb	r3, [r3, #5]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_DAC_ConfigChannel+0x20>
 8001196:	2302      	movs	r3, #2
 8001198:	e036      	b.n	8001208 <HAL_DAC_ConfigChannel+0x8e>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2202      	movs	r2, #2
 80011a4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80011ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	6811      	ldr	r1, [r2, #0]
 80011ec:	20c0      	movs	r0, #192	; 0xc0
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	fa00 f202 	lsl.w	r2, r0, r2
 80011f4:	43d2      	mvns	r2, r2
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	3308      	adds	r3, #8
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e004      	b.n	8001248 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	3314      	adds	r3, #20
 8001246:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	461a      	mov	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e16b      	b.n	8001554 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 815a 	bne.w	800154e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x4a>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d123      	bne.n	80012f2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	69b9      	ldr	r1, [r7, #24]
 80012ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0203 	and.w	r2, r3, #3
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d00b      	beq.n	8001346 <HAL_GPIO_Init+0xe6>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800133a:	2b11      	cmp	r3, #17
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b12      	cmp	r3, #18
 8001344:	d130      	bne.n	80013a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80b4 	beq.w	800154e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4a5f      	ldr	r2, [pc, #380]	; (8001568 <HAL_GPIO_Init+0x308>)
 80013ec:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <HAL_GPIO_Init+0x308>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <HAL_GPIO_Init+0x308>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001402:	4a5a      	ldr	r2, [pc, #360]	; (800156c <HAL_GPIO_Init+0x30c>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a51      	ldr	r2, [pc, #324]	; (8001570 <HAL_GPIO_Init+0x310>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d02b      	beq.n	8001486 <HAL_GPIO_Init+0x226>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a50      	ldr	r2, [pc, #320]	; (8001574 <HAL_GPIO_Init+0x314>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d025      	beq.n	8001482 <HAL_GPIO_Init+0x222>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_GPIO_Init+0x318>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01f      	beq.n	800147e <HAL_GPIO_Init+0x21e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_GPIO_Init+0x31c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d019      	beq.n	800147a <HAL_GPIO_Init+0x21a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x320>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x216>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x324>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x212>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x328>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x20e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_GPIO_Init+0x32c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x20a>
 8001466:	2307      	movs	r3, #7
 8001468:	e00e      	b.n	8001488 <HAL_GPIO_Init+0x228>
 800146a:	2308      	movs	r3, #8
 800146c:	e00c      	b.n	8001488 <HAL_GPIO_Init+0x228>
 800146e:	2306      	movs	r3, #6
 8001470:	e00a      	b.n	8001488 <HAL_GPIO_Init+0x228>
 8001472:	2305      	movs	r3, #5
 8001474:	e008      	b.n	8001488 <HAL_GPIO_Init+0x228>
 8001476:	2304      	movs	r3, #4
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x228>
 800147a:	2303      	movs	r3, #3
 800147c:	e004      	b.n	8001488 <HAL_GPIO_Init+0x228>
 800147e:	2302      	movs	r3, #2
 8001480:	e002      	b.n	8001488 <HAL_GPIO_Init+0x228>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_GPIO_Init+0x228>
 8001486:	2300      	movs	r3, #0
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	f002 0203 	and.w	r2, r2, #3
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	4093      	lsls	r3, r2
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001498:	4934      	ldr	r1, [pc, #208]	; (800156c <HAL_GPIO_Init+0x30c>)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a6:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <HAL_GPIO_Init+0x330>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ca:	4a31      	ldr	r2, [pc, #196]	; (8001590 <HAL_GPIO_Init+0x330>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x330>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_GPIO_Init+0x330>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_GPIO_Init+0x330>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <HAL_GPIO_Init+0x330>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_GPIO_Init+0x330>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001548:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_GPIO_Init+0x330>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3301      	adds	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	f67f ae90 	bls.w	800127c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800155c:	bf00      	nop
 800155e:	3724      	adds	r7, #36	; 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40023800 	.word	0x40023800
 800156c:	40013800 	.word	0x40013800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40021000 	.word	0x40021000
 8001584:	40021400 	.word	0x40021400
 8001588:	40021800 	.word	0x40021800
 800158c:	40021c00 	.word	0x40021c00
 8001590:	40013c00 	.word	0x40013c00

08001594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e22d      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d075      	beq.n	800169e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	4ba3      	ldr	r3, [pc, #652]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d00c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4ba0      	ldr	r3, [pc, #640]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d112      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b9d      	ldr	r3, [pc, #628]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d6:	d10b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	4b99      	ldr	r3, [pc, #612]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d05b      	beq.n	800169c <HAL_RCC_OscConfig+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d157      	bne.n	800169c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e208      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x74>
 80015fa:	4a91      	ldr	r2, [pc, #580]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	4b90      	ldr	r3, [pc, #576]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4a8b      	ldr	r2, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	4b8a      	ldr	r3, [pc, #552]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4a88      	ldr	r2, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	4b87      	ldr	r3, [pc, #540]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 800162c:	4a84      	ldr	r2, [pc, #528]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	4b84      	ldr	r3, [pc, #528]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4a81      	ldr	r2, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7fe ffaa 	bl	80005a4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001654:	f7fe ffa6 	bl	80005a4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1cd      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xc0>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7fe ff96 	bl	80005a4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7fe ff92 	bl	80005a4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1b9      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0xe8>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b62      	ldr	r3, [pc, #392]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e18d      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4956      	ldr	r1, [pc, #344]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e03a      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <HAL_RCC_OscConfig+0x2b0>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7fe ff4b 	bl	80005a4 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7fe ff47 	bl	80005a4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e16e      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4943      	ldr	r1, [pc, #268]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001732:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_OscConfig+0x2b0>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7fe ff2a 	bl	80005a4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7fe ff26 	bl	80005a4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e14d      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d030      	beq.n	80017e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d016      	beq.n	80017b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_RCC_OscConfig+0x2b4>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7fe ff0a 	bl	80005a4 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7fe ff06 	bl	80005a4 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e12d      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x200>
 80017b2:	e015      	b.n	80017e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_RCC_OscConfig+0x2b4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7fe fef3 	bl	80005a4 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7fe feef 	bl	80005a4 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e116      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a0 	beq.w	800192e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10f      	bne.n	800181e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x2b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d121      	bne.n	800186e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_RCC_OscConfig+0x2b8>)
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_RCC_OscConfig+0x2b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7fe feb5 	bl	80005a4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e011      	b.n	8001862 <HAL_RCC_OscConfig+0x2ce>
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	42470000 	.word	0x42470000
 8001848:	42470e80 	.word	0x42470e80
 800184c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7fe fea8 	bl	80005a4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0cf      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x478>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x2f0>
 8001876:	4a66      	ldr	r2, [pc, #408]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 8001878:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x32a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x312>
 800188c:	4a60      	ldr	r2, [pc, #384]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 800188e:	4b60      	ldr	r3, [pc, #384]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	4a5d      	ldr	r2, [pc, #372]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x32a>
 80018a6:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 80018b4:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7fe fe6d 	bl	80005a4 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7fe fe69 	bl	80005a4 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e08e      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ee      	beq.n	80018ce <HAL_RCC_OscConfig+0x33a>
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7fe fe57 	bl	80005a4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7fe fe53 	bl	80005a4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e078      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d064      	beq.n	8001a00 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001936:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d05c      	beq.n	80019fc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d141      	bne.n	80019ce <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_OscConfig+0x480>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7fe fe28 	bl	80005a4 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7fe fe24 	bl	80005a4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04b      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001976:	4926      	ldr	r1, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	019b      	lsls	r3, r3, #6
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	061b      	lsls	r3, r3, #24
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_RCC_OscConfig+0x480>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7fe fdfd 	bl	80005a4 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ae:	f7fe fdf9 	bl	80005a4 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e020      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x41a>
 80019cc:	e018      	b.n	8001a00 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_RCC_OscConfig+0x480>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7fe fde6 	bl	80005a4 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019dc:	f7fe fde2 	bl	80005a4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_OscConfig+0x47c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x448>
 80019fa:	e001      	b.n	8001a00 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	42470060 	.word	0x42470060

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0ca      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x1b4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 020f 	and.w	r2, r3, #15
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b64      	ldr	r3, [pc, #400]	; (8001bcc <HAL_RCC_ClockConfig+0x1b4>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <HAL_RCC_ClockConfig+0x1b4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0b6      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	4b58      	ldr	r3, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	494f      	ldr	r1, [pc, #316]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d044      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d119      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e07d      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06d      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e065      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4936      	ldr	r1, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 0203 	bic.w	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7fe fd4c 	bl	80005a4 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7fe fd48 	bl	80005a4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e04d      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1b4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 020f 	and.w	r2, r3, #15
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d90c      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_RCC_ClockConfig+0x1b4>)
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_RCC_ClockConfig+0x1b4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 020f 	and.w	r2, r3, #15
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e030      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6c:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8a:	4911      	ldr	r1, [pc, #68]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b9e:	f000 f81d 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7fe fcae 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08002a9c 	.word	0x08002a9c
 8001bd8:	20000008 	.word	0x20000008

08001bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be4:	2200      	movs	r2, #0
 8001be6:	60fa      	str	r2, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	617a      	str	r2, [r7, #20]
 8001bec:	2200      	movs	r2, #0
 8001bee:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001bf6:	6892      	ldr	r2, [r2, #8]
 8001bf8:	f002 020c 	and.w	r2, r2, #12
 8001bfc:	2a04      	cmp	r2, #4
 8001bfe:	d007      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x34>
 8001c00:	2a08      	cmp	r2, #8
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	f040 8090 	bne.w	8001d2a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c0a:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c0c:	613b      	str	r3, [r7, #16]
       break;
 8001c0e:	e08f      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c12:	613b      	str	r3, [r7, #16]
      break;
 8001c14:	e08c      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c16:	4a49      	ldr	r2, [pc, #292]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c18:	6852      	ldr	r2, [r2, #4]
 8001c1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001c1e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c20:	4a46      	ldr	r2, [pc, #280]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c22:	6852      	ldr	r2, [r2, #4]
 8001c24:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	d023      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	f04f 0400 	mov.w	r4, #0
 8001c36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	ea03 0301 	and.w	r3, r3, r1
 8001c42:	ea04 0402 	and.w	r4, r4, r2
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c48:	fb02 f104 	mul.w	r1, r2, r4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	fb02 f203 	mul.w	r2, r2, r3
 8001c52:	440a      	add	r2, r1
 8001c54:	493b      	ldr	r1, [pc, #236]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c56:	fba3 0101 	umull	r0, r1, r3, r1
 8001c5a:	1853      	adds	r3, r2, r1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f04f 0400 	mov.w	r4, #0
 8001c64:	461a      	mov	r2, r3
 8001c66:	4623      	mov	r3, r4
 8001c68:	f7fe faae 	bl	80001c8 <__aeabi_uldivmod>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e04c      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c76:	6852      	ldr	r2, [r2, #4]
 8001c78:	0992      	lsrs	r2, r2, #6
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001c84:	f04f 0600 	mov.w	r6, #0
 8001c88:	ea05 0501 	and.w	r5, r5, r1
 8001c8c:	ea06 0602 	and.w	r6, r6, r2
 8001c90:	4629      	mov	r1, r5
 8001c92:	4632      	mov	r2, r6
 8001c94:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001c98:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001c9c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	465a      	mov	r2, fp
 8001ca4:	46aa      	mov	sl, r5
 8001ca6:	46b3      	mov	fp, r6
 8001ca8:	4655      	mov	r5, sl
 8001caa:	465e      	mov	r6, fp
 8001cac:	1b4d      	subs	r5, r1, r5
 8001cae:	eb62 0606 	sbc.w	r6, r2, r6
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	4632      	mov	r2, r6
 8001cb6:	0194      	lsls	r4, r2, #6
 8001cb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cbc:	018b      	lsls	r3, r1, #6
 8001cbe:	1a5b      	subs	r3, r3, r1
 8001cc0:	eb64 0402 	sbc.w	r4, r4, r2
 8001cc4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001cc8:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001ccc:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	464c      	mov	r4, r9
 8001cd4:	4655      	mov	r5, sl
 8001cd6:	465e      	mov	r6, fp
 8001cd8:	18ed      	adds	r5, r5, r3
 8001cda:	eb46 0604 	adc.w	r6, r6, r4
 8001cde:	462b      	mov	r3, r5
 8001ce0:	4634      	mov	r4, r6
 8001ce2:	02a2      	lsls	r2, r4, #10
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f04f 0400 	mov.w	r4, #0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	f7fe fa60 	bl	80001c8 <__aeabi_uldivmod>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0c1b      	lsrs	r3, r3, #16
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	613b      	str	r3, [r7, #16]
      break;
 8001d28:	e002      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d2c:	613b      	str	r3, [r7, #16]
      break;
 8001d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d30:	693b      	ldr	r3, [r7, #16]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	017d7840 	.word	0x017d7840

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008

08001d60 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01d      	b.n	8001dae <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fcf2 	bl	8002770 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f000 f900 	bl	8001fa4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	68d2      	ldr	r2, [r2, #12]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_TIM_ConfigClockSource+0x1c>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0c8      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x1ae>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b40      	cmp	r3, #64	; 0x40
 8001e3e:	d077      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0x144>
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d80e      	bhi.n	8001e62 <HAL_TIM_ConfigClockSource+0x76>
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	f000 808a 	beq.w	8001f5e <HAL_TIM_ConfigClockSource+0x172>
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d802      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x68>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d07e      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8001e52:	e099      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	f000 8089 	beq.w	8001f6c <HAL_TIM_ConfigClockSource+0x180>
 8001e5a:	2b30      	cmp	r3, #48	; 0x30
 8001e5c:	f000 808d 	beq.w	8001f7a <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8001e60:	e092      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001e62:	2b70      	cmp	r3, #112	; 0x70
 8001e64:	d016      	beq.n	8001e94 <HAL_TIM_ConfigClockSource+0xa8>
 8001e66:	2b70      	cmp	r3, #112	; 0x70
 8001e68:	d804      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x88>
 8001e6a:	2b50      	cmp	r3, #80	; 0x50
 8001e6c:	d040      	beq.n	8001ef0 <HAL_TIM_ConfigClockSource+0x104>
 8001e6e:	2b60      	cmp	r3, #96	; 0x60
 8001e70:	d04e      	beq.n	8001f10 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8001e72:	e089      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0x96>
 8001e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7e:	d024      	beq.n	8001eca <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8001e80:	e082      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	6892      	ldr	r2, [r2, #8]
 8001e8c:	f022 0207 	bic.w	r2, r2, #7
 8001e90:	609a      	str	r2, [r3, #8]
    break;
 8001e92:	e079      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f000 f9af 	bl	8002206 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ebe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	609a      	str	r2, [r3, #8]
    break;
 8001ec8:	e05e      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6899      	ldr	r1, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f000 f994 	bl	8002206 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	6892      	ldr	r2, [r2, #8]
 8001ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eec:	609a      	str	r2, [r3, #8]
    break;
 8001eee:	e04b      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	461a      	mov	r2, r3
 8001efe:	f000 f8fb 	bl	80020f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2150      	movs	r1, #80	; 0x50
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f95c 	bl	80021c6 <TIM_ITRx_SetConfig>
    break;
 8001f0e:	e03b      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f000 f91e 	bl	800215e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2160      	movs	r1, #96	; 0x60
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f94c 	bl	80021c6 <TIM_ITRx_SetConfig>
    break;
 8001f2e:	e02b      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f000 f8db 	bl	80020f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2140      	movs	r1, #64	; 0x40
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f93c 	bl	80021c6 <TIM_ITRx_SetConfig>
    break;
 8001f4e:	e01b      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f935 	bl	80021c6 <TIM_ITRx_SetConfig>
    break;
 8001f5c:	e014      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2110      	movs	r1, #16
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f92e 	bl	80021c6 <TIM_ITRx_SetConfig>
    break;
 8001f6a:	e00d      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2120      	movs	r1, #32
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f927 	bl	80021c6 <TIM_ITRx_SetConfig>
    break;
 8001f78:	e006      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2130      	movs	r1, #48	; 0x30
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f920 	bl	80021c6 <TIM_ITRx_SetConfig>
    break;
 8001f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a44      	ldr	r2, [pc, #272]	; (80020cc <TIM_Base_SetConfig+0x128>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <TIM_Base_SetConfig+0x44>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc6:	d00f      	beq.n	8001fe8 <TIM_Base_SetConfig+0x44>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <TIM_Base_SetConfig+0x12c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00b      	beq.n	8001fe8 <TIM_Base_SetConfig+0x44>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <TIM_Base_SetConfig+0x130>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <TIM_Base_SetConfig+0x44>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <TIM_Base_SetConfig+0x134>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_Base_SetConfig+0x44>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <TIM_Base_SetConfig+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <TIM_Base_SetConfig+0x48>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <TIM_Base_SetConfig+0x4a>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a31      	ldr	r2, [pc, #196]	; (80020cc <TIM_Base_SetConfig+0x128>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d02b      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d027      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <TIM_Base_SetConfig+0x12c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d023      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <TIM_Base_SetConfig+0x130>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d01f      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a2c      	ldr	r2, [pc, #176]	; (80020d8 <TIM_Base_SetConfig+0x134>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d01b      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <TIM_Base_SetConfig+0x138>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d017      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <TIM_Base_SetConfig+0x13c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <TIM_Base_SetConfig+0x140>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00f      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <TIM_Base_SetConfig+0x144>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00b      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a27      	ldr	r2, [pc, #156]	; (80020ec <TIM_Base_SetConfig+0x148>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <TIM_Base_SetConfig+0x14c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0xc0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <TIM_Base_SetConfig+0x150>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <TIM_Base_SetConfig+0xc4>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <TIM_Base_SetConfig+0xc6>
 8002068:	2300      	movs	r3, #0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <TIM_Base_SetConfig+0x128>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d003      	beq.n	80020a6 <TIM_Base_SetConfig+0x102>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <TIM_Base_SetConfig+0x106>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <TIM_Base_SetConfig+0x108>
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	615a      	str	r2, [r3, #20]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40001800 	.word	0x40001800
 80020f0:	40001c00 	.word	0x40001c00
 80020f4:	40002000 	.word	0x40002000

080020f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800212a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f023 030a 	bic.w	r3, r3, #10
 800213c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	621a      	str	r2, [r3, #32]
}
 8002152:	bf00      	nop
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800215e:	b480      	push	{r7}
 8002160:	b087      	sub	sp, #28
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f023 0210 	bic.w	r2, r3, #16
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	031b      	lsls	r3, r3, #12
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	621a      	str	r2, [r3, #32]
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	f043 0307 	orr.w	r3, r3, #7
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	609a      	str	r2, [r3, #8]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002206:	b480      	push	{r7}
 8002208:	b087      	sub	sp, #28
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	431a      	orrs	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4313      	orrs	r3, r2
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	609a      	str	r2, [r3, #8]
} 
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800225e:	2302      	movs	r3, #2
 8002260:	e032      	b.n	80022c8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	6852      	ldr	r2, [r2, #4]
 800227c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002280:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	6851      	ldr	r1, [r2, #4]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	6892      	ldr	r2, [r2, #8]
 800229e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	6891      	ldr	r1, [r2, #8]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	6852      	ldr	r2, [r2, #4]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
} 
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  cut5k.ff1 = 0.63894552515902248;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <main+0x44>)
 80022da:	4a10      	ldr	r2, [pc, #64]	; (800231c <main+0x48>)
 80022dc:	601a      	str	r2, [r3, #0]
  cut5k.ff2 = -2.0;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <main+0x44>)
 80022e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80022e4:	605a      	str	r2, [r3, #4]
  cut5k.fb1 = -1.142980502;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <main+0x44>)
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <main+0x4c>)
 80022ea:	609a      	str	r2, [r3, #8]
  cut5k.fb2 = 0.41280159809618877;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <main+0x44>)
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <main+0x50>)
 80022f0:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f2:	f7fe f8f1 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f6:	f000 f81b 	bl	8002330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fa:	f000 f955 	bl	80025a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80022fe:	f000 f88d 	bl	800241c <MX_ADC1_Init>
  MX_DAC_Init();
 8002302:	f000 f8db 	bl	80024bc <MX_DAC_Init>
  MX_TIM3_Init();
 8002306:	f000 f905 	bl	8002514 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <main+0x54>)
 800230c:	f7ff fd53 	bl	8001db6 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8002310:	4806      	ldr	r0, [pc, #24]	; (800232c <main+0x58>)
 8002312:	f7fe f997 	bl	8000644 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002316:	e7fe      	b.n	8002316 <main+0x42>
 8002318:	200000c8 	.word	0x200000c8
 800231c:	3f2391ef 	.word	0x3f2391ef
 8002320:	bf924d2f 	.word	0xbf924d2f
 8002324:	3ed35abb 	.word	0x3ed35abb
 8002328:	2000002c 	.word	0x2000002c
 800232c:	20000068 	.word	0x20000068

08002330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b094      	sub	sp, #80	; 0x50
 8002334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <SystemClock_Config+0xdc>)
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <SystemClock_Config+0xdc>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <SystemClock_Config+0xdc>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	4a2e      	ldr	r2, [pc, #184]	; (8002410 <SystemClock_Config+0xe0>)
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <SystemClock_Config+0xe0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <SystemClock_Config+0xe0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800236e:	2302      	movs	r3, #2
 8002370:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002372:	2301      	movs	r3, #1
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002376:	2310      	movs	r3, #16
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800237a:	2302      	movs	r3, #2
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800237e:	2300      	movs	r3, #0
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002382:	2308      	movs	r3, #8
 8002384:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002386:	23a8      	movs	r3, #168	; 0xa8
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800238a:	2302      	movs	r3, #2
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800238e:	2304      	movs	r3, #4
 8002390:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f8fc 	bl	8001594 <HAL_RCC_OscConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023a2:	21a0      	movs	r1, #160	; 0xa0
 80023a4:	481b      	ldr	r0, [pc, #108]	; (8002414 <SystemClock_Config+0xe4>)
 80023a6:	f000 f927 	bl	80025f8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023aa:	230f      	movs	r3, #15
 80023ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ae:	2302      	movs	r3, #2
 80023b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	2105      	movs	r1, #5
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fb25 	bl	8001a18 <HAL_RCC_ClockConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <SystemClock_Config+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023d4:	21ae      	movs	r1, #174	; 0xae
 80023d6:	480f      	ldr	r0, [pc, #60]	; (8002414 <SystemClock_Config+0xe4>)
 80023d8:	f000 f90e 	bl	80025f8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80023dc:	f7ff fcb4 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <SystemClock_Config+0xe8>)
 80023e4:	fba3 2302 	umull	r2, r3, r3, r2
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fe6d 	bl	80010ca <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023f0:	2004      	movs	r0, #4
 80023f2:	f7fe fe77 	bl	80010e4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295
 80023fe:	f7fe fe3a 	bl	8001076 <HAL_NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3750      	adds	r7, #80	; 0x50
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000
 8002414:	08002a8c 	.word	0x08002a8c
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002424:	4a23      	ldr	r2, [pc, #140]	; (80024b4 <MX_ADC1_Init+0x98>)
 8002426:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_ADC1_Init+0x94>)
 800242a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800242e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002438:	2201      	movs	r2, #1
 800243a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_ADC1_Init+0x94>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_ADC1_Init+0x94>)
 800244a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <MX_ADC1_Init+0x94>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002460:	2201      	movs	r2, #1
 8002462:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_ADC1_Init+0x94>)
 800246c:	2201      	movs	r2, #1
 800246e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002470:	480f      	ldr	r0, [pc, #60]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002472:	f7fe f8a3 	bl	80005bc <HAL_ADC_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <MX_ADC1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800247c:	21d3      	movs	r1, #211	; 0xd3
 800247e:	480e      	ldr	r0, [pc, #56]	; (80024b8 <MX_ADC1_Init+0x9c>)
 8002480:	f000 f8ba 	bl	80025f8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8002484:	2300      	movs	r3, #0
 8002486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002488:	2301      	movs	r3, #1
 800248a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800248c:	2304      	movs	r3, #4
 800248e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002490:	463b      	mov	r3, r7
 8002492:	4619      	mov	r1, r3
 8002494:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_ADC1_Init+0x94>)
 8002496:	f7fe faf1 	bl	8000a7c <HAL_ADC_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024a0:	21dd      	movs	r1, #221	; 0xdd
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_ADC1_Init+0x9c>)
 80024a4:	f000 f8a8 	bl	80025f8 <_Error_Handler>
  }

}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000068 	.word	0x20000068
 80024b4:	40012000 	.word	0x40012000
 80024b8:	08002a8c 	.word	0x08002a8c

080024bc <MX_DAC_Init>:

/* DAC init function */
static void MX_DAC_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_DAC_Init+0x4c>)
 80024c4:	4a11      	ldr	r2, [pc, #68]	; (800250c <MX_DAC_Init+0x50>)
 80024c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80024c8:	480f      	ldr	r0, [pc, #60]	; (8002508 <MX_DAC_Init+0x4c>)
 80024ca:	f7fe fe34 	bl	8001136 <HAL_DAC_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <MX_DAC_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024d4:	21ed      	movs	r1, #237	; 0xed
 80024d6:	480e      	ldr	r0, [pc, #56]	; (8002510 <MX_DAC_Init+0x54>)
 80024d8:	f000 f88e 	bl	80025f8 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80024dc:	2300      	movs	r3, #0
 80024de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80024e4:	463b      	mov	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4807      	ldr	r0, [pc, #28]	; (8002508 <MX_DAC_Init+0x4c>)
 80024ec:	f7fe fe45 	bl	800117a <HAL_DAC_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <MX_DAC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024f6:	21f6      	movs	r1, #246	; 0xf6
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_DAC_Init+0x54>)
 80024fa:	f000 f87d 	bl	80025f8 <_Error_Handler>
  }

}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200000b0 	.word	0x200000b0
 800250c:	40007400 	.word	0x40007400
 8002510:	08002a8c 	.word	0x08002a8c

08002514 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <MX_TIM3_Init+0x88>)
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <MX_TIM3_Init+0x8c>)
 800251e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <MX_TIM3_Init+0x88>)
 8002522:	2253      	movs	r2, #83	; 0x53
 8002524:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <MX_TIM3_Init+0x88>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_TIM3_Init+0x88>)
 800252e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002532:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_TIM3_Init+0x88>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800253a:	4818      	ldr	r0, [pc, #96]	; (800259c <MX_TIM3_Init+0x88>)
 800253c:	f7ff fc10 	bl	8001d60 <HAL_TIM_Base_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <MX_TIM3_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002546:	f240 1109 	movw	r1, #265	; 0x109
 800254a:	4816      	ldr	r0, [pc, #88]	; (80025a4 <MX_TIM3_Init+0x90>)
 800254c:	f000 f854 	bl	80025f8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	4619      	mov	r1, r3
 800255c:	480f      	ldr	r0, [pc, #60]	; (800259c <MX_TIM3_Init+0x88>)
 800255e:	f7ff fc45 	bl	8001dec <HAL_TIM_ConfigClockSource>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <MX_TIM3_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002568:	f240 110f 	movw	r1, #271	; 0x10f
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_TIM3_Init+0x90>)
 800256e:	f000 f843 	bl	80025f8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002572:	2320      	movs	r3, #32
 8002574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <MX_TIM3_Init+0x88>)
 8002580:	f7ff fe63 	bl	800224a <HAL_TIMEx_MasterConfigSynchronization>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <MX_TIM3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 800258a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM3_Init+0x90>)
 8002590:	f000 f832 	bl	80025f8 <_Error_Handler>
  }

}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000002c 	.word	0x2000002c
 80025a0:	40000400 	.word	0x40000400
 80025a4:	08002a8c 	.word	0x08002a8c

080025a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <MX_GPIO_Init+0x4c>)
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_GPIO_Init+0x4c>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <MX_GPIO_Init+0x4c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <MX_GPIO_Init+0x4c>)
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_GPIO_Init+0x4c>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_GPIO_Init+0x4c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]

}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002602:	e7fe      	b.n	8002602 <_Error_Handler+0xa>

08002604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <HAL_MspInit+0xa0>)
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_MspInit+0xa0>)
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_MspInit+0xa0>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_MspInit+0xa0>)
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_MspInit+0xa0>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_MspInit+0xa0>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002642:	2003      	movs	r0, #3
 8002644:	f7fe fd0c 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	f06f 000b 	mvn.w	r0, #11
 8002650:	f7fe fd11 	bl	8001076 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	f06f 000a 	mvn.w	r0, #10
 800265c:	f7fe fd0b 	bl	8001076 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	f06f 0009 	mvn.w	r0, #9
 8002668:	f7fe fd05 	bl	8001076 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	2100      	movs	r1, #0
 8002670:	f06f 0004 	mvn.w	r0, #4
 8002674:	f7fe fcff 	bl	8001076 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	f06f 0003 	mvn.w	r0, #3
 8002680:	f7fe fcf9 	bl	8001076 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	f06f 0001 	mvn.w	r0, #1
 800268c:	f7fe fcf3 	bl	8001076 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f7fe fced 	bl	8001076 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800

080026a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_ADC_MspInit+0x60>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d121      	bne.n	80026fe <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <HAL_ADC_MspInit+0x64>)
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_ADC_MspInit+0x64>)
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_ADC_MspInit+0x64>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d6:	2301      	movs	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026da:	2303      	movs	r3, #3
 80026dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 030c 	add.w	r3, r7, #12
 80026e6:	4619      	mov	r1, r3
 80026e8:	4809      	ldr	r0, [pc, #36]	; (8002710 <HAL_ADC_MspInit+0x68>)
 80026ea:	f7fe fdb9 	bl	8001260 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2012      	movs	r0, #18
 80026f4:	f7fe fcbf 	bl	8001076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80026f8:	2012      	movs	r0, #18
 80026fa:	f7fe fcd8 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40012000 	.word	0x40012000
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <HAL_DAC_MspInit+0x50>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d119      	bne.n	800275a <HAL_DAC_MspInit+0x46>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_DAC_MspInit+0x54>)
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_DAC_MspInit+0x54>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_DAC_MspInit+0x54>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002742:	2310      	movs	r3, #16
 8002744:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002746:	2303      	movs	r3, #3
 8002748:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_DAC_MspInit+0x58>)
 8002756:	f7fe fd83 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40007400 	.word	0x40007400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000

08002770 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <HAL_TIM_Base_MspInit+0x3c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10d      	bne.n	800279e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_TIM_Base_MspInit+0x40>)
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_TIM_Base_MspInit+0x40>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_TIM_Base_MspInit+0x40>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40023800 	.word	0x40023800

080027b4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <MemManage_Handler+0x4>

080027ce <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <BusFault_Handler+0x4>

080027d4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <UsageFault_Handler+0x4>

080027da <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002808:	f7fd feb8 	bl	800057c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800280c:	f7fe fc86 	bl	800111c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <ADC_IRQHandler>:
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
extern int16_t scopeAdc;
extern highP cut5k;
void ADC_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	runHighP(&cut5k, HAL_ADC_GetValue(&hadc1));
 800281a:	4821      	ldr	r0, [pc, #132]	; (80028a0 <ADC_IRQHandler+0x8c>)
 800281c:	f7fe f903 	bl	8000a26 <HAL_ADC_GetValue>
 8002820:	ee07 0a90 	vmov	s15, r0
 8002824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002828:	eeb0 0a67 	vmov.f32	s0, s15
 800282c:	481d      	ldr	r0, [pc, #116]	; (80028a4 <ADC_IRQHandler+0x90>)
 800282e:	f000 f87b 	bl	8002928 <runHighP>
	scopeAdc = getHighP(&cut5k) * 100;
 8002832:	481c      	ldr	r0, [pc, #112]	; (80028a4 <ADC_IRQHandler+0x90>)
 8002834:	f000 f8c0 	bl	80029b8 <getHighP>
 8002838:	eeb0 7a40 	vmov.f32	s14, s0
 800283c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80028a8 <ADC_IRQHandler+0x94>
 8002840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002848:	edc7 7a01 	vstr	s15, [r7, #4]
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	b21a      	sxth	r2, r3
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <ADC_IRQHandler+0x98>)
 8002852:	801a      	strh	r2, [r3, #0]
	// Filtre ciktisi
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,getHighP(&cut5k) * 1000 +2048);
 8002854:	4813      	ldr	r0, [pc, #76]	; (80028a4 <ADC_IRQHandler+0x90>)
 8002856:	f000 f8af 	bl	80029b8 <getHighP>
 800285a:	eeb0 7a40 	vmov.f32	s14, s0
 800285e:	eddf 7a14 	vldr	s15, [pc, #80]	; 80028b0 <ADC_IRQHandler+0x9c>
 8002862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002866:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028b4 <ADC_IRQHandler+0xa0>
 800286a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800286e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002872:	ee17 3a90 	vmov	r3, s15
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	480f      	ldr	r0, [pc, #60]	; (80028b8 <ADC_IRQHandler+0xa4>)
 800287c:	f7fe fcca 	bl	8001214 <HAL_DAC_SetValue>
	// ADC girdisi
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, HAL_ADC_GetValue(&hadc1));
 8002880:	4807      	ldr	r0, [pc, #28]	; (80028a0 <ADC_IRQHandler+0x8c>)
 8002882:	f7fe f8d0 	bl	8000a26 <HAL_ADC_GetValue>
 8002886:	4603      	mov	r3, r0
 8002888:	2200      	movs	r2, #0
 800288a:	2110      	movs	r1, #16
 800288c:	480a      	ldr	r0, [pc, #40]	; (80028b8 <ADC_IRQHandler+0xa4>)
 800288e:	f7fe fcc1 	bl	8001214 <HAL_DAC_SetValue>
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002892:	4803      	ldr	r0, [pc, #12]	; (80028a0 <ADC_IRQHandler+0x8c>)
 8002894:	f7fd ff86 	bl	80007a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000068 	.word	0x20000068
 80028a4:	200000c8 	.word	0x200000c8
 80028a8:	42c80000 	.word	0x42c80000
 80028ac:	200000c4 	.word	0x200000c4
 80028b0:	447a0000 	.word	0x447a0000
 80028b4:	45000000 	.word	0x45000000
 80028b8:	200000b0 	.word	0x200000b0

080028bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4a16      	ldr	r2, [pc, #88]	; (800291c <SystemInit+0x60>)
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <SystemInit+0x60>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <SystemInit+0x64>)
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <SystemInit+0x64>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <SystemInit+0x64>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028e2:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <SystemInit+0x64>)
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <SystemInit+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <SystemInit+0x64>)
 80028f4:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <SystemInit+0x68>)
 80028f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028f8:	4a09      	ldr	r2, [pc, #36]	; (8002920 <SystemInit+0x64>)
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <SystemInit+0x64>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <SystemInit+0x64>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <SystemInit+0x60>)
 800290c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002910:	609a      	str	r2, [r3, #8]
#endif
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00
 8002920:	40023800 	.word	0x40023800
 8002924:	24003010 	.word	0x24003010

08002928 <runHighP>:
#include "highPassModule.h"

void runHighP(highP *highN, float input){
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	ed87 0a00 	vstr	s0, [r7]
		highN->r_n = highN->r_n1 * highN->fb1 ;
		highN->r_n += highN->r_n2 * highN->fb2;
		highN->r_n += highN->r_n1 * highN->ff2;
		highN->r_n += highN->r_n2;
		*/
		highN->r_n = highN->in * highN->ff1 - highN->r_n1 * highN->fb1 - highN->r_n2 * highN->fb2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	ed93 7a07 	vldr	s14, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	edd3 6a05 	vldr	s13, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002954:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	edd3 6a06 	vldr	s13, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	edd3 7a03 	vldr	s15, [r3, #12]
 8002964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	edc3 7a04 	vstr	s15, [r3, #16]

		// Output
		highN->out = highN->r_n2 + highN->r_n1 * highN->ff2 + highN->r_n;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	ed93 7a06 	vldr	s14, [r3, #24]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	edd3 6a05 	vldr	s13, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	edd3 7a01 	vldr	s15, [r3, #4]
 8002984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	edc3 7a08 	vstr	s15, [r3, #32]

		// Sampling delay
		highN->r_n2 = highN->r_n1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
		highN->r_n1 = highN->r_n;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	615a      	str	r2, [r3, #20]



}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <getHighP>:



float getHighP(highP *highN){
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	return highN->out;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	ee07 3a90 	vmov	s15, r3
}
 80029c8:	eeb0 0a67 	vmov.f32	s0, s15
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029de:	e003      	b.n	80029e8 <LoopCopyDataInit>

080029e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029e6:	3104      	adds	r1, #4

080029e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029e8:	480b      	ldr	r0, [pc, #44]	; (8002a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029f0:	d3f6      	bcc.n	80029e0 <CopyDataInit>
  ldr  r2, =_sbss
 80029f2:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029f4:	e002      	b.n	80029fc <LoopFillZerobss>

080029f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029f8:	f842 3b04 	str.w	r3, [r2], #4

080029fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a00:	d3f9      	bcc.n	80029f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a02:	f7ff ff5b 	bl	80028bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a06:	f000 f811 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a0a:	f7ff fc63 	bl	80022d4 <main>
  bx  lr    
 8002a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a14:	08002abc 	.word	0x08002abc
  ldr  r0, =_sdata
 8002a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a1c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002a20:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002a24:	200000ec 	.word	0x200000ec

08002a28 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <CAN1_RX0_IRQHandler>
	...

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4e0d      	ldr	r6, [pc, #52]	; (8002a64 <__libc_init_array+0x38>)
 8002a30:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a32:	1ba4      	subs	r4, r4, r6
 8002a34:	10a4      	asrs	r4, r4, #2
 8002a36:	2500      	movs	r5, #0
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	4e0b      	ldr	r6, [pc, #44]	; (8002a6c <__libc_init_array+0x40>)
 8002a3e:	4c0c      	ldr	r4, [pc, #48]	; (8002a70 <__libc_init_array+0x44>)
 8002a40:	f000 f818 	bl	8002a74 <_init>
 8002a44:	1ba4      	subs	r4, r4, r6
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	2500      	movs	r5, #0
 8002a4a:	42a5      	cmp	r5, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a54:	4798      	blx	r3
 8002a56:	3501      	adds	r5, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a5e:	4798      	blx	r3
 8002a60:	3501      	adds	r5, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002ab4 	.word	0x08002ab4
 8002a68:	08002ab4 	.word	0x08002ab4
 8002a6c:	08002ab4 	.word	0x08002ab4
 8002a70:	08002ab8 	.word	0x08002ab8

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
